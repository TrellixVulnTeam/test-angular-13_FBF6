/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/core/schematics/migrations/renderer-to-renderer2/helpers", ["require", "exports", "typescript"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHelper = void 0;
    const typescript_1 = __importDefault(require("typescript"));
    /** Gets the string representation of a helper function. */
    function getHelper(name, sourceFile, printer) {
        const helperDeclaration = getHelperDeclaration(name);
        return '\n' + printer.printNode(typescript_1.default.EmitHint.Unspecified, helperDeclaration, sourceFile) + '\n';
    }
    exports.getHelper = getHelper;
    /** Creates a function declaration for the specified helper name. */
    function getHelperDeclaration(name) {
        switch (name) {
            case "AnyDuringRendererMigration" /* any */:
                return createAnyTypeHelper();
            case "__ngRendererCreateElementHelper" /* createElement */:
                return getCreateElementHelper();
            case "__ngRendererCreateTextHelper" /* createText */:
                return getCreateTextHelper();
            case "__ngRendererCreateTemplateAnchorHelper" /* createTemplateAnchor */:
                return getCreateTemplateAnchorHelper();
            case "__ngRendererProjectNodesHelper" /* projectNodes */:
                return getProjectNodesHelper();
            case "__ngRendererAnimateHelper" /* animate */:
                return getAnimateHelper();
            case "__ngRendererDestroyViewHelper" /* destroyView */:
                return getDestroyViewHelper();
            case "__ngRendererDetachViewHelper" /* detachView */:
                return getDetachViewHelper();
            case "__ngRendererAttachViewAfterHelper" /* attachViewAfter */:
                return getAttachViewAfterHelper();
            case "__ngRendererSetElementAttributeHelper" /* setElementAttribute */:
                return getSetElementAttributeHelper();
            case "__ngRendererSplitNamespaceHelper" /* splitNamespace */:
                return getSplitNamespaceHelper();
        }
    }
    /** Creates a helper for a custom `any` type during the migration. */
    function createAnyTypeHelper() {
        // type AnyDuringRendererMigration = any;
        return typescript_1.default.createTypeAliasDeclaration([], [], "AnyDuringRendererMigration" /* any */, [], typescript_1.default.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword));
    }
    /** Creates a function parameter that is typed as `any`. */
    function getAnyTypedParameter(parameterName, isRequired = true) {
        // Declare the parameter as `any` so we don't have to add extra logic to ensure that the
        // generated code will pass type checking. Use our custom `any` type so people have an incentive
        // to clean it up afterwards and to avoid potentially introducing lint warnings in G3.
        const type = typescript_1.default.createTypeReferenceNode("AnyDuringRendererMigration" /* any */, []);
        return typescript_1.default.createParameter([], [], undefined, parameterName, isRequired ? undefined : typescript_1.default.createToken(typescript_1.default.SyntaxKind.QuestionToken), type);
    }
    /** Creates a helper for `createElement`. */
    function getCreateElementHelper() {
        const renderer = typescript_1.default.createIdentifier('renderer');
        const parent = typescript_1.default.createIdentifier('parent');
        const namespaceAndName = typescript_1.default.createIdentifier('namespaceAndName');
        const name = typescript_1.default.createIdentifier('name');
        const namespace = typescript_1.default.createIdentifier('namespace');
        // [namespace, name] = splitNamespace(namespaceAndName);
        const namespaceAndNameVariable = typescript_1.default.createVariableDeclaration(typescript_1.default.createArrayBindingPattern([namespace, name].map(id => typescript_1.default.createBindingElement(undefined, undefined, id))), undefined, typescript_1.default.createCall(typescript_1.default.createIdentifier("__ngRendererSplitNamespaceHelper" /* splitNamespace */), [], [namespaceAndName]));
        // `renderer.createElement(name, namespace)`.
        const creationCall = typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'createElement'), [], [name, namespace]);
        return getCreationHelper("__ngRendererCreateElementHelper" /* createElement */, creationCall, renderer, parent, [namespaceAndName], [typescript_1.default.createVariableStatement(undefined, typescript_1.default.createVariableDeclarationList([namespaceAndNameVariable], typescript_1.default.NodeFlags.Const))]);
    }
    /** Creates a helper for `createText`. */
    function getCreateTextHelper() {
        const renderer = typescript_1.default.createIdentifier('renderer');
        const parent = typescript_1.default.createIdentifier('parent');
        const value = typescript_1.default.createIdentifier('value');
        // `renderer.createText(value)`.
        const creationCall = typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'createText'), [], [value]);
        return getCreationHelper("__ngRendererCreateTextHelper" /* createText */, creationCall, renderer, parent, [value]);
    }
    /** Creates a helper for `createTemplateAnchor`. */
    function getCreateTemplateAnchorHelper() {
        const renderer = typescript_1.default.createIdentifier('renderer');
        const parent = typescript_1.default.createIdentifier('parent');
        // `renderer.createComment('')`.
        const creationCall = typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'createComment'), [], [typescript_1.default.createStringLiteral('')]);
        return getCreationHelper("__ngRendererCreateTemplateAnchorHelper" /* createTemplateAnchor */, creationCall, renderer, parent);
    }
    /**
     * Gets the function declaration for a creation helper. This is reused between `createElement`,
     * `createText` and `createTemplateAnchor` which follow a very similar pattern.
     * @param functionName Function that the helper should have.
     * @param creationCall Expression that is used to create a node inside the function.
     * @param rendererParameter Parameter for the `renderer`.
     * @param parentParameter Parameter for the `parent` inside the function.
     * @param extraParameters Extra parameters to be added to the end.
     * @param precedingVariables Extra variables to be added before the one that creates the `node`.
     */
    function getCreationHelper(functionName, creationCall, renderer, parent, extraParameters = [], precedingVariables = []) {
        const node = typescript_1.default.createIdentifier('node');
        // `const node = {{creationCall}}`.
        const nodeVariableStatement = typescript_1.default.createVariableStatement(undefined, typescript_1.default.createVariableDeclarationList([typescript_1.default.createVariableDeclaration(node, undefined, creationCall)], typescript_1.default.NodeFlags.Const));
        // `if (parent) { renderer.appendChild(parent, node) }`.
        const guardedAppendChildCall = typescript_1.default.createIf(parent, typescript_1.default.createBlock([typescript_1.default.createExpressionStatement(typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'appendChild'), [], [parent, node]))], true));
        return typescript_1.default.createFunctionDeclaration([], [], undefined, functionName, [], [renderer, parent, ...extraParameters].map(name => getAnyTypedParameter(name)), undefined, typescript_1.default.createBlock([
            ...precedingVariables, nodeVariableStatement, guardedAppendChildCall,
            typescript_1.default.createReturn(node)
        ], true));
    }
    /** Creates a helper for `projectNodes`. */
    function getProjectNodesHelper() {
        const renderer = typescript_1.default.createIdentifier('renderer');
        const parent = typescript_1.default.createIdentifier('parent');
        const nodes = typescript_1.default.createIdentifier('nodes');
        const incrementor = typescript_1.default.createIdentifier('i');
        // for (let i = 0; i < nodes.length; i++) {
        //   renderer.appendChild(parent, nodes[i]);
        // }
        const loopInitializer = typescript_1.default.createVariableDeclarationList([typescript_1.default.createVariableDeclaration(incrementor, undefined, typescript_1.default.createNumericLiteral('0'))], typescript_1.default.NodeFlags.Let);
        const loopCondition = typescript_1.default.createBinary(incrementor, typescript_1.default.SyntaxKind.LessThanToken, typescript_1.default.createPropertyAccess(nodes, typescript_1.default.createIdentifier('length')));
        const appendStatement = typescript_1.default.createExpressionStatement(typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'appendChild'), [], [parent, typescript_1.default.createElementAccess(nodes, incrementor)]));
        const loop = typescript_1.default.createFor(loopInitializer, loopCondition, typescript_1.default.createPostfix(incrementor, typescript_1.default.SyntaxKind.PlusPlusToken), typescript_1.default.createBlock([appendStatement]));
        return typescript_1.default.createFunctionDeclaration([], [], undefined, "__ngRendererProjectNodesHelper" /* projectNodes */, [], [renderer, parent, nodes].map(name => getAnyTypedParameter(name)), undefined, typescript_1.default.createBlock([loop], true));
    }
    /** Creates a helper for `animate`. */
    function getAnimateHelper() {
        // throw new Error('...');
        const throwStatement = typescript_1.default.createThrow(typescript_1.default.createNew(typescript_1.default.createIdentifier('Error'), [], [typescript_1.default.createStringLiteral('Renderer.animate is no longer supported!')]));
        return typescript_1.default.createFunctionDeclaration([], [], undefined, "__ngRendererAnimateHelper" /* animate */, [], [], undefined, typescript_1.default.createBlock([throwStatement], true));
    }
    /** Creates a helper for `destroyView`. */
    function getDestroyViewHelper() {
        const renderer = typescript_1.default.createIdentifier('renderer');
        const allNodes = typescript_1.default.createIdentifier('allNodes');
        const incrementor = typescript_1.default.createIdentifier('i');
        // for (let i = 0; i < allNodes.length; i++) {
        //   renderer.destroyNode(allNodes[i]);
        // }
        const loopInitializer = typescript_1.default.createVariableDeclarationList([typescript_1.default.createVariableDeclaration(incrementor, undefined, typescript_1.default.createNumericLiteral('0'))], typescript_1.default.NodeFlags.Let);
        const loopCondition = typescript_1.default.createBinary(incrementor, typescript_1.default.SyntaxKind.LessThanToken, typescript_1.default.createPropertyAccess(allNodes, typescript_1.default.createIdentifier('length')));
        const destroyStatement = typescript_1.default.createExpressionStatement(typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'destroyNode'), [], [typescript_1.default.createElementAccess(allNodes, incrementor)]));
        const loop = typescript_1.default.createFor(loopInitializer, loopCondition, typescript_1.default.createPostfix(incrementor, typescript_1.default.SyntaxKind.PlusPlusToken), typescript_1.default.createBlock([destroyStatement]));
        return typescript_1.default.createFunctionDeclaration([], [], undefined, "__ngRendererDestroyViewHelper" /* destroyView */, [], [renderer, allNodes].map(name => getAnyTypedParameter(name)), undefined, typescript_1.default.createBlock([loop], true));
    }
    /** Creates a helper for `detachView`. */
    function getDetachViewHelper() {
        const renderer = typescript_1.default.createIdentifier('renderer');
        const rootNodes = typescript_1.default.createIdentifier('rootNodes');
        const incrementor = typescript_1.default.createIdentifier('i');
        const node = typescript_1.default.createIdentifier('node');
        // for (let i = 0; i < rootNodes.length; i++) {
        //   const node = rootNodes[i];
        //   renderer.removeChild(renderer.parentNode(node), node);
        // }
        const loopInitializer = typescript_1.default.createVariableDeclarationList([typescript_1.default.createVariableDeclaration(incrementor, undefined, typescript_1.default.createNumericLiteral('0'))], typescript_1.default.NodeFlags.Let);
        const loopCondition = typescript_1.default.createBinary(incrementor, typescript_1.default.SyntaxKind.LessThanToken, typescript_1.default.createPropertyAccess(rootNodes, typescript_1.default.createIdentifier('length')));
        // const node = rootNodes[i];
        const nodeVariableStatement = typescript_1.default.createVariableStatement(undefined, typescript_1.default.createVariableDeclarationList([typescript_1.default.createVariableDeclaration(node, undefined, typescript_1.default.createElementAccess(rootNodes, incrementor))], typescript_1.default.NodeFlags.Const));
        // renderer.removeChild(renderer.parentNode(node), node);
        const removeCall = typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'removeChild'), [], [typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'parentNode'), [], [node]), node]);
        const loop = typescript_1.default.createFor(loopInitializer, loopCondition, typescript_1.default.createPostfix(incrementor, typescript_1.default.SyntaxKind.PlusPlusToken), typescript_1.default.createBlock([nodeVariableStatement, typescript_1.default.createExpressionStatement(removeCall)]));
        return typescript_1.default.createFunctionDeclaration([], [], undefined, "__ngRendererDetachViewHelper" /* detachView */, [], [renderer, rootNodes].map(name => getAnyTypedParameter(name)), undefined, typescript_1.default.createBlock([loop], true));
    }
    /** Creates a helper for `attachViewAfter` */
    function getAttachViewAfterHelper() {
        const renderer = typescript_1.default.createIdentifier('renderer');
        const node = typescript_1.default.createIdentifier('node');
        const rootNodes = typescript_1.default.createIdentifier('rootNodes');
        const parent = typescript_1.default.createIdentifier('parent');
        const nextSibling = typescript_1.default.createIdentifier('nextSibling');
        const incrementor = typescript_1.default.createIdentifier('i');
        const createConstWithMethodCallInitializer = (constName, methodToCall) => {
            return typescript_1.default.createVariableStatement(undefined, typescript_1.default.createVariableDeclarationList([typescript_1.default.createVariableDeclaration(constName, undefined, typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, methodToCall), [], [node]))], typescript_1.default.NodeFlags.Const));
        };
        // const parent = renderer.parentNode(node);
        const parentVariableStatement = createConstWithMethodCallInitializer(parent, 'parentNode');
        // const nextSibling = renderer.nextSibling(node);
        const nextSiblingVariableStatement = createConstWithMethodCallInitializer(nextSibling, 'nextSibling');
        // for (let i = 0; i < rootNodes.length; i++) {
        //   renderer.insertBefore(parentElement, rootNodes[i], nextSibling);
        // }
        const loopInitializer = typescript_1.default.createVariableDeclarationList([typescript_1.default.createVariableDeclaration(incrementor, undefined, typescript_1.default.createNumericLiteral('0'))], typescript_1.default.NodeFlags.Let);
        const loopCondition = typescript_1.default.createBinary(incrementor, typescript_1.default.SyntaxKind.LessThanToken, typescript_1.default.createPropertyAccess(rootNodes, typescript_1.default.createIdentifier('length')));
        const insertBeforeCall = typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'insertBefore'), [], [parent, typescript_1.default.createElementAccess(rootNodes, incrementor), nextSibling]);
        const loop = typescript_1.default.createFor(loopInitializer, loopCondition, typescript_1.default.createPostfix(incrementor, typescript_1.default.SyntaxKind.PlusPlusToken), typescript_1.default.createBlock([typescript_1.default.createExpressionStatement(insertBeforeCall)]));
        return typescript_1.default.createFunctionDeclaration([], [], undefined, "__ngRendererAttachViewAfterHelper" /* attachViewAfter */, [], [renderer, node, rootNodes].map(name => getAnyTypedParameter(name)), undefined, typescript_1.default.createBlock([parentVariableStatement, nextSiblingVariableStatement, loop], true));
    }
    /** Creates a helper for `setElementAttribute` */
    function getSetElementAttributeHelper() {
        const renderer = typescript_1.default.createIdentifier('renderer');
        const element = typescript_1.default.createIdentifier('element');
        const namespaceAndName = typescript_1.default.createIdentifier('namespaceAndName');
        const value = typescript_1.default.createIdentifier('value');
        const name = typescript_1.default.createIdentifier('name');
        const namespace = typescript_1.default.createIdentifier('namespace');
        // [namespace, name] = splitNamespace(namespaceAndName);
        const namespaceAndNameVariable = typescript_1.default.createVariableDeclaration(typescript_1.default.createArrayBindingPattern([namespace, name].map(id => typescript_1.default.createBindingElement(undefined, undefined, id))), undefined, typescript_1.default.createCall(typescript_1.default.createIdentifier("__ngRendererSplitNamespaceHelper" /* splitNamespace */), [], [namespaceAndName]));
        // renderer.setAttribute(element, name, value, namespace);
        const setCall = typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'setAttribute'), [], [element, name, value, namespace]);
        // renderer.removeAttribute(element, name, namespace);
        const removeCall = typescript_1.default.createCall(typescript_1.default.createPropertyAccess(renderer, 'removeAttribute'), [], [element, name, namespace]);
        // if (value != null) { setCall() } else { removeCall }
        const ifStatement = typescript_1.default.createIf(typescript_1.default.createBinary(value, typescript_1.default.SyntaxKind.ExclamationEqualsToken, typescript_1.default.createNull()), typescript_1.default.createBlock([typescript_1.default.createExpressionStatement(setCall)], true), typescript_1.default.createBlock([typescript_1.default.createExpressionStatement(removeCall)], true));
        const functionBody = typescript_1.default.createBlock([
            typescript_1.default.createVariableStatement(undefined, typescript_1.default.createVariableDeclarationList([namespaceAndNameVariable], typescript_1.default.NodeFlags.Const)),
            ifStatement
        ], true);
        return typescript_1.default.createFunctionDeclaration([], [], undefined, "__ngRendererSetElementAttributeHelper" /* setElementAttribute */, [], [
            getAnyTypedParameter(renderer), getAnyTypedParameter(element),
            getAnyTypedParameter(namespaceAndName), getAnyTypedParameter(value, false)
        ], undefined, functionBody);
    }
    /** Creates a helper for splitting a name that might contain a namespace. */
    function getSplitNamespaceHelper() {
        const name = typescript_1.default.createIdentifier('name');
        const match = typescript_1.default.createIdentifier('match');
        const regex = typescript_1.default.createRegularExpressionLiteral('/^:([^:]+):(.+)$/');
        const matchCall = typescript_1.default.createCall(typescript_1.default.createPropertyAccess(name, 'match'), [], [regex]);
        // const match = name.split(regex);
        const matchVariable = typescript_1.default.createVariableDeclarationList([typescript_1.default.createVariableDeclaration(match, undefined, matchCall)], typescript_1.default.NodeFlags.Const);
        // return [match[1], match[2]];
        const matchReturn = typescript_1.default.createReturn(typescript_1.default.createArrayLiteral([typescript_1.default.createElementAccess(match, 1), typescript_1.default.createElementAccess(match, 2)]));
        // if (name[0] === ':') { const match = ...; return ...; }
        const ifStatement = typescript_1.default.createIf(typescript_1.default.createBinary(typescript_1.default.createElementAccess(name, 0), typescript_1.default.SyntaxKind.EqualsEqualsEqualsToken, typescript_1.default.createStringLiteral(':')), typescript_1.default.createBlock([typescript_1.default.createVariableStatement([], matchVariable), matchReturn], true));
        // return ['', name];
        const elseReturn = typescript_1.default.createReturn(typescript_1.default.createArrayLiteral([typescript_1.default.createStringLiteral(''), name]));
        return typescript_1.default.createFunctionDeclaration([], [], undefined, "__ngRendererSplitNamespaceHelper" /* splitNamespace */, [], [getAnyTypedParameter(name)], undefined, typescript_1.default.createBlock([ifStatement, elseReturn], true));
    }
});
//# sourceMappingURL=data:application/json;base64,